# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: my-ru-mladostlife

custom:
  websiteName: mladost.life
  hostedZoneName: serverless-zombo.com
  aliasHostedZoneId: Z3AQBSTGFYJSTF    # us-east-1
  aliasDNSName: s3-website-us-east-1.amazonaws.com

  # confige the serverless-s3-sync
  s3Sync:
    - bucketName: ${self:custom.websiteName}
      localDir: website

plugins:
  - serverless-s3-sync

provider:
  name: aws
  profile: serverless-cli
  runtime: nodejs8.10

resources:
  Resources:
    # the S3 bucket to host the static contents
    WebsiteS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.websiteName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    # the permissive policy for the previous S3 bucket
    WebsiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.websiteName}/* # creating S3 ARN is :arn:aws:s3:::${bucketName}/*
              # Resource:
              #   Fn::Join: [
              #     "", [
              #       "arn:aws:s3:::",
              #       {
              #         "Ref": "Website"
              #       },
              #       "/*"
              #     ]
              #   ]

    # CDN - Cloudfront distribution, which wraps the API Gateway, and the S3 bucket, as different origins
    WebsiteCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          HttpVersion: http2

          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'

          # TODO: add aliases - the CNAMES must be routed in the domain registration hosting (GoDaddy)
          # Aliases : [ "mysite.example.com", "yoursite.example.com" ]
          Aliases : [ "www.${self:custom.websiteName}", "${self:custom.websiteName}" ]

          DefaultRootObject: index.html

          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html

          Origins:
            - DomainName: ${self:custom.websiteName}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebsiteOrigin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only # http-only | match-viewer | https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z

          DefaultCacheBehavior:
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https # allow-all | redirect-to-https | https-only
            ## The origin id defined above
            TargetOriginId: WebsiteOrigin
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - DELETE
              - PATCH
              - POST
              - PUT
            Compress: true
            DefaultTTL: 30
            MinTTL: 10
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: true
              Cookies:
                # Forward: none
                Forward: all

          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

    # a DNS record for the website
    # DnsRecord:
    #   Type: "AWS::Route53::RecordSet"
    #   Properties:
    #     AliasTarget:
    #       DNSName: ${self:custom.aliasDNSName}
    #       HostedZoneId: ${self:custom.aliasHostedZoneId}
    #     HostedZoneName: ${self:custom.siteName}.
    #     Name:
    #       Ref: Website
    #     Type: 'A'

  # Print out:
  # 1. the name of the website S3 Bucket,
  # 1. the origin ('AWS::Region' is a AWS prop)
  Outputs:
    WebsiteName:
      Value:
        Ref: WebsiteS3Bucket

    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebsiteCloudFrontDistribution, DomainName ]

    Region:
      Value: { "Fn::Join": [ '', [ Ref: AWS::Region] ] }
