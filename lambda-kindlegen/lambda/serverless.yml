service: my-kindlegen-lambda

frameworkVersion: ">=1.1.0"

useDotenv: true

custom:
  # the bucket that will recieve the files to convert
  uploadBucket: my-kindlegen-upload-${self:provider.stage}

provider:
  name: aws
  profile: serverless-cli
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  runtime: nodejs14.x

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", "${self:custom.uploadBucket}", '/*' ] ]  }

  # will be set to all fuctions even though it may be not needed
  environment:
    S3_UPLOAD_BUCKET: ${self:custom.uploadBucket}

  # setup CORS (with default headers and etc...) for all HTTP endpoints
  # if needed can be fine-tuned for each function individually
  # NOTE: httpApi is different than the http event
  httpApi:
    cors: true

    # Note: authorizers in 'httpApi' are set differently than for 'http' events
    authorizers:
      clientAuth:
        type: request
        functionName: auth
        # this just ensures the header MUST be present
        # this also means the Labmda will receive it in the event.identitySource field
        identitySource: $request.header.Authorization
        # Flag that specifies if authorizer function will return authorization responses in simple format.
        # enableSimpleResponses: true # Flag that specifies if authorizer function will return authorization responses in simple format.
        # payloadVersion: '2.0'

functions:
  convert:
    handler: convert/handler.onUpload
    timeout: 300 # 5mins , default is 6 seconds
    events:
      # the S3 Bucket will be created if not already, SHOULD NOT be defined in 'resources'
      - s3:
          existing: true # pass true as the bucket will be created explicitly in the resoures section, otherwise it will be tried to be created here and will fail as it will be created twice
          bucket: ${self:custom.uploadBucket}
          event: s3:ObjectCreated:*
          # rules:
          #   - suffix: .epub
    layers:
      # Use the exported AWS Layer from the other CloudFormation stack
      # the name of the CloudFormation is 'my-kindlegen-layer-dev' (for dev stage) and it exports 'KindlegenLayerExport'
      - ${cf:my-kindlegen-layer-${self:provider.stage}.KindlegenLayerExport}


  # authorizer for the client requests
  auth:
    handler: client/authorizer.authorize
    environment:
      AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID}
      AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0_client_public_key)}

  # used to create a pre-signed-url for uploading
  getUploadUrl:
     handler: client/handler.onGetUploadURL
     events:
      - httpApi:
          path: /${self:provider.stage}/get_upload_url
          method: GET
          authorizer:
            name: clientAuth
  # used to create a pre-signed-url for downloading
  getDownloadUrl:
     handler: client/handler.onGetDownloadURL
     events:
      - httpApi:
          path: /${self:provider.stage}/get_download_url
          method: GET
          authorizer:
            name: clientAuth


resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.uploadBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "Authorization"
              AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - "*"
